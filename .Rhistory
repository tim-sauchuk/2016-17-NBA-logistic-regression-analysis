rosterURL <- c()
for(i in 1:l){
rosterURL <- append(rosterURL, paste("http://www.basketball-reference.com/teams/",
MVP.Stats$Tm[i],"/",substr(MVP.Stats$Season[i],1,2),
substr(MVP.Stats$Season[i],6,7),".html", sep=""))
}
return (rosterURL)
}
# p: list of all of the Player names and unique HTML's in the format "Stephen Curry/curryst01"
# output: list of the URL's that reference each MVP's stats
playerURLs <- function(){
players <- sub("\\\\.*", "", MVP.Stats$Player)
l <- length(players)
playURL <- c()
for(i in 1:l){
playURL <- append(playURL, substr(MVP.Stats$Player[i],nchar(players[i])+2,nchar(MVP.Stats$Player[i])))
}
for(i in 1:l){
first <- substr(playURL[i],1,1)
playURL[i] <- paste("www.basketball-reference.com/players/", first, "/", playURL[i], ".html", sep='')
}
return (playURL)
}
# add a new column to the MVP.Stats data frame with each player's URL
MVP.Stats$URL <- playerURLs()
# import each player's data into MongoDB
playerStats <- function(address,season){
webpage <- getURL(address)
tc <- textConnection(webpage)
website <- readLines(tc)
close(tc)
pagetree <- htmlTreeParse(website,useInternalNodes = TRUE)
for(i in 1:30){
if(unlist(xpathApply(pagetree,paste("//*/table/tbody/tr[",toString(i),"]/th"), xmlValue))==season){
num = i
break
}
}
num = paste("//*/table/tbody/tr[",toString(num))
Season <- unlist(xpathApply(pagetree,paste(num,"]/th"), xmlValue))
Age <- unlist(xpathApply(pagetree,paste(num,"]/td[1]"), xmlValue))
Tm <- unlist(xpathApply(pagetree,paste(num,"]/td[2]"), xmlValue))
Pos <- unlist(xpathApply(pagetree,paste(num,"]/td[3]"), xmlValue))
G <- unlist(xpathApply(pagetree,paste(num,"]/td[4]"), xmlValue))
GS <- unlist(xpathApply(pagetree,paste(num,"]/td[5]"), xmlValue))
MP <- unlist(xpathApply(pagetree,paste(num,"]/td[6]"), xmlValue))
FG <- unlist(xpathApply(pagetree,paste(num,"]/td[7]"), xmlValue))
FGA <- unlist(xpathApply(pagetree,paste(num,"]/td[8]"), xmlValue))
FGPerc <- unlist(xpathApply(pagetree,paste(num,"]/td[9]"), xmlValue))
ThreeP <- unlist(xpathApply(pagetree,paste(num,"]/td[10]"), xmlValue))
ThreePA <- unlist(xpathApply(pagetree,paste(num,"]/td[11]"), xmlValue))
ThreePPerc <- unlist(xpathApply(pagetree,paste(num,"]/td[12]"), xmlValue))
TwoP <- unlist(xpathApply(pagetree,paste(num,"]/td[13]"), xmlValue))
TwoPA <- unlist(xpathApply(pagetree,paste(num,"]/td[14]"), xmlValue))
TwoPPerc <- unlist(xpathApply(pagetree,paste(num,"]/td[15]"), xmlValue))
eFGPerc <- unlist(xpathApply(pagetree,paste(num,"]/td[16]"), xmlValue))
FT <- unlist(xpathApply(pagetree,paste(num,"]/td[17]"), xmlValue))
FTA <- unlist(xpathApply(pagetree,paste(num,"]/td[18]"), xmlValue))
FTPerc <- unlist(xpathApply(pagetree,paste(num,"]/td[19]"), xmlValue))
ORB <- unlist(xpathApply(pagetree,paste(num,"]/td[20]"), xmlValue))
DRB <- unlist(xpathApply(pagetree,paste(num,"]/td[21]"), xmlValue))
TRB <- unlist(xpathApply(pagetree,paste(num,"]/td[22]"), xmlValue))
AST <- unlist(xpathApply(pagetree,paste(num,"]/td[23]"), xmlValue))
STL <- unlist(xpathApply(pagetree,paste(num,"]/td[24]"), xmlValue))
BLK <- unlist(xpathApply(pagetree,paste(num,"]/td[25]"), xmlValue))
TOV <- unlist(xpathApply(pagetree,paste(num,"]/td[26]"), xmlValue))
PF <- unlist(xpathApply(pagetree,paste(num,"]/td[27]"), xmlValue))
PTS <- unlist(xpathApply(pagetree,paste(num,"]/td[28]"), xmlValue))
stats <- c(Season,Age,Tm,Pos,G,GS,MP,FG,FGA,FGPerc,ThreeP,ThreePA, ThreePPerc,TwoP,TwoPA,TwoPPerc,
eFGPerc,FT,FTA,FTPerc,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS)
return (stats)
}
# create a data frame with all of the MVP's stats
mvpPlayerStats <- function(){
pStats <- data.frame(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)
num <- nrow(MVP.Stats)
urls <- playerURLs()
seasons <- MVP.Stats$Season
for(i in 1:5){
pStats[i,] <- playerStats(urls[i],seasons[i])
}
names(pStats) <- c('Season','Age','Tm','Pos','G','GS','MP','FG','FGA','FGPerc','ThreeP','ThreePA',
'ThreePPerc','TwoP','TwoPA','TwoPPerc',
'eFGPerc','FT','FTA','FTPerc','ORB','DRB','TRB','AST','STL','BLK','TOV','PF','PTS')
return (pStats)
}
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + FGPerc + FTPerc
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + FGPerc + FTPerc
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + FGPerc + FTPerc
+ WS, data=MVP.Stats, family=binomial))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + FGPerc + FTPerc
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial))
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + STL + BLK + FGPerc + ThreePPerc + FTPerc
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB, data=MVP.Stats, family=binomial, na.action = na.omit))
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB, data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST,
data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB,
data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST,
data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + STL
, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + ThreePPerc
, data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST
, data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + ThreePPerc
, data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + FTPerc
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + FTPerc
, data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial, na.action = na.omit))
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB
+ WS + WS.fourtyEight, data=MVP.Stats, family=binomial, na.action = na.omit))
model
names(MVP.Stats) <- c('PK','Season','Lg','Player','Voting','Age','Tm','G','MP','PTS','TRB','AST','STL',
'BLKAdjusted','FGPerc','ThreePPerc','FTPerc','WS','WS.fourtyEight','MVP')
MVP.Stats$BLKAdjusted <- MVP.Stats$BLKAdjusted*10
MVP.Stats$BLKAdjusted <- MVP.Stats$BLKAdjusted*10
MVP.Stats$BLKAdjusted <- MVP.Stats$BLKAdjusted * 10
MVP.Stats$BLKAdjusted * 10]
MVP.Stats$BLKAdjusted * 10
MVP.Stats$BLKAdjusted + 10
df1
df1$BLK * 10
options(stringsAsFactors = FALSE)
MVP.Stats$BLKAdjusted <- MVP.Stats$BLKAdjusted * 10
MVP.Stats$Age * 10
MVP.Stats$BLKAdjusted * 10
l <- nrow(MVP.Stats)
for(i in 1:l){
if(!is.na(MVP.Stats[i,]$BLKAdjusted)){
MVP.Stats[i,]$BLKAdjusted <- MVP.Stats[i,]$BLKAdjusted * 10
}
}
!is.na(MVP.Stats[47,]$BLKAdjusted)
l <- nrow(MVP.Stats)
for(i in 1:l){
if(!is.na(MVP.Stats[i,]$BLKAdjusted)){
MVP.Stats[i,]$BLKAdjusted <- MVP.Stats[i,]$BLKAdjusted * 10
}
}
names(MVP.Stats) <- c('PK','Season','Lg','Player','Voting','Age','Tm','G','MP','PTS','TRB','AST','STL',
'BLK','FGPerc','ThreePPerc','FTPerc','WS','WS.fourtyEight','MVP')
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST + FGPerc
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB + AST
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + MP + PTS + TRB + AST
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
MVP.Stats$AST * 10
MVP.Stats$AST <- MVP.Stats$AST * 10
model <- summary(glm(formula = MVP ~ Age + MP + PTS + TRB + AST
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
MVP.Stats <- mongolite::mongo(collection="MVP_Stats", db="MVP", url = "mongodb://localhost", verbose = FALSE,
options = mongolite::ssl_options())
MVP.Stats <- MVP.Stats$find()
names(MVP.Stats) <- c('PK','Season','Lg','Player','Voting','Age','Tm','G','MP','PTS','TRB','AST','STL',
'BLK','FGPerc','ThreePPerc','FTPerc','WS','WS.fourtyEight','MVP')
model <- summary(glm(formula = MVP ~ Age + G + MP + PTS + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + MP + PTS + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + PTS + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + TRB + AST
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
# make a logistic regression model
model <- summary(glm(formula = MVP ~ Age + PTS + TRB + AST
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model <- summary(glm(formula = MVP ~ Age + TRB + AST
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
model <- summary(glm(formula = MVP ~ Age + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit))
model
MVP.Stats[1,]
predict(model,MVP.Stats[1,])
model <- glm(formula = MVP ~ Age + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit)
modelSum <- summary(model)
predict(model,MVP.Stats[1,])
model <- glm(formula = MVP ~ Age + TRB
+ WS, data=MVP.Stats, family=binomial, na.action = na.omit)
modelSum <- summary(model)
modelSum
predict(model,MVP.Stats[1,])
predict(model,MVP.Stats[2,])
predict(model,MVP.Stats[3,])
predict(model,MVP.Stats[4,])
predict(model,MVP.Stats[5,])
predict(model,MVP.Stats[12,])
predict(model,MVP.Stats[88,])
model <- glm(formula = MVP ~ Age + TRB + WS, data=MVP.Stats, family=binomial, na.action = na.omit)
modelSum <- summary(model)
predict(model,MVP.Stats[1,])
library(jsonlite)
library(mongolite)
library(RCurl)
library(XML)
library(rvest)
# makes a dataframe of all the mvp candidates of all time by scraping them off basketball-reference.com
# no inputs
# output - dataframe of mvp candidates w/ stats
players <- function(){
mvp1956URL <- getURL("http://www.basketball-reference.com/awards/awards_1956.html")
playerStats <- readHTMLTable(mvp1956URL)[[1]]
playerStats$MVP <- 0
playerStats$Year <- 1956
playerStats[1,]$MVP <- 1
for(i in 1957:2016){
URL <- getURL(paste("http://www.basketball-reference.com/awards/awards_",toString(i),".html", sep=""))
Stats <- readHTMLTable(URL)[[1]]
Stats$MVP <- 0
Stats[1,]$MVP <- 1
Stats$Year <- i
playerStats <- rbind(playerStats,Stats)
}
playerStats <- playerStats[,-1]
return (playerStats)
}
# DATA ACQUISITION / CLEANING
# if the data doesn't is already exist, load it.
if (!exists("MVP.Stats")){
MVP.Stats <- players()
# create random numbers for every row
MVP.Stats$Set <- sample(1:nrow(MVP.Stats),nrow(MVP.Stats))
# split the data into training and testing sets based on randum number
MVP.Stats.Train <- MVP.Stats[MVP.Stats$Set<=nrow(MVP.Stats)/2,]
MVP.Stats.Test <- MVP.Stats[MVP.Stats$Set>nrow(MVP.Stats)/2,]
# export the MVP data as a csv
write.csv(MVP.Stats, file = "MVP_STATS.csv")
write.csv(MVP.Stats.Train, file = "MVP_Stats_Train.csv")
write.csv(MVP.Stats.Test, file = "MVP_Stats_Test.csv")
}
# export the 2017 player data
if(!exists("newPlayers")){
# scrape the 2016-2017 player data and export as csv
URL <- getURL("http://www.basketball-reference.com/leagues/NBA_2017_per_game.html")
newPlayers <- readHTMLTable(URL)[[1]]
colnames(newPlayers)[30] <- "PTS"
write.csv(newPlayers, file = "newPlayers.csv")
}
# export the advanced 2017 player data
if(!exists("newPlayersAd")){
# scrape the 2016-2017 advanced player data and export as csv
URL <- getURL("http://www.basketball-reference.com/leagues/NBA_2017_advanced.html")
newPlayersAd <- readHTMLTable(URL)[[1]]
newPlayersAd <- newPlayersAd[,-c(20,25)]
write.csv(newPlayersAd, file = "newPlayersAd.csv")
}
# DATA STORAGE WAS DONE MANUALLY THROUGH MONGOBOOSTERS USING THE EXPORTED CSV'S
# DATA RETRIEVAL / ADDITIONAL CLEANING
# import the MVP data
MVP.Stats <- mongolite::mongo(collection="MVP_STATS", db="MVP", url = "mongodb://localhost", verbose = FALSE,
options = mongolite::ssl_options())
MVP.Stats <- MVP.Stats$find()
MVP.Stats <- MVP.Stats[,-1]
MVP.Stats$`FT%` <- as.numeric(MVP.Stats$`FT%` * 10)
MVP.Stats$`FG%` <- as.numeric(MVP.Stats$`FG%` * 10)
MVP.Stats$G <- as.numeric(MVP.Stats$G)
MVP.Stats$PTS <- as.numeric(MVP.Stats$PTS)
MVP.Stats$TRB <- as.numeric(MVP.Stats$TRB)
MVP.Stats$WS <- as.numeric(MVP.Stats$WS)
# import the MVP test data
MVP.Stats.Test <- mongolite::mongo(collection="MVP_Stats_Test", db="MVP", url = "mongodb://localhost", verbose = FALSE,
options = mongolite::ssl_options())
MVP.Stats.Test <- MVP.Stats.Test$find()
MVP.Stats.Test <- MVP.Stats.Test[,-1]
MVP.Stats.Test$`FT%` <- as.numeric(MVP.Stats.Test$`FT%` * 10)
MVP.Stats.Test$`FG%` <- as.numeric(MVP.Stats.Test$`FG%` * 10)
MVP.Stats.Test$MP <- as.numeric(MVP.Stats.Test$MP)
MVP.Stats.Test$AST <- as.numeric(MVP.Stats.Test$AST)
MVP.Stats.Test$TRB <- as.numeric(MVP.Stats.Test$TRB)
MVP.Stats.Test$WS <- as.numeric(MVP.Stats.Test$WS)
# import the MVP training data
MVP.Stats.Train <- mongolite::mongo(collection="MVP_Stats_Train", db="MVP", url = "mongodb://localhost",
verbose = FALSE, options = mongolite::ssl_options())
MVP.Stats.Train <- MVP.Stats.Train$find()
MVP.Stats.Train <- MVP.Stats.Train[,-1]
MVP.Stats.Train$`FT%` <- as.numeric(MVP.Stats.Train$`FT%` * 10)
MVP.Stats.Train$`FG%` <- as.numeric(MVP.Stats.Train$`FG%` * 10)
MVP.Stats.Train$MP <- as.numeric(MVP.Stats.Train$MP)
MVP.Stats.Train$AST <- as.numeric(MVP.Stats.Train$AST)
MVP.Stats.Train$TRB <- as.numeric(MVP.Stats.Train$TRB)
MVP.Stats.Train$WS <- as.numeric(MVP.Stats.Train$WS)
# import the 2016-2017 player data back into R from MongoDB
newPlayers <- mongolite::mongo(collection="newPlayers", db="MVP", url = "mongodb://localhost",
verbose = FALSE, options = mongolite::ssl_options())
newPlayers <- newPlayers$find()
newPlayers <- newPlayers[,-1]
newPlayers <- newPlayers[!duplicated(newPlayers$Player),]
newPlayers$`FT%` <- as.numeric(newPlayers$`FT%`) * 10
removes <- as.numeric(newPlayers[is.na(newPlayers$`FT%`),]$Rk)[-1]
newPlayers <- na.omit(newPlayers)
# import the 2016-2017 advanced player data back into R from MongoDB
newPlayersAd <- mongolite::mongo(collection="newPlayersAd", db="MVP", url = "mongodb://localhost",
verbose = FALSE, options = mongolite::ssl_options())
newPlayersAd <- newPlayersAd$find()
newPlayersAd <- newPlayersAd[,-1]
newPlayersAd <- newPlayersAd[!duplicated(newPlayersAd$Player),]
newPlayersAd$Rk <- as.numeric(newPlayersAd$Rk)
newPlayersAd <- newPlayersAd[!(newPlayersAd$Rk %in% removes),]
newPlayersAd$`TS%` <- as.numeric(newPlayersAd$`TS%`)
newPlayersAd <- na.omit(newPlayersAd)
# add WS to newPlayers & change newPlayers to numeric
newPlayers$WS <- as.numeric(newPlayersAd$WS)
newPlayers$WS[is.na(newPlayers$WS)] <- 0
newPlayers$G <- as.numeric(newPlayers$G)
newPlayers$PTS <- as.numeric(newPlayers$PTS)
newPlayers$TRB <- as.numeric(newPlayers$TRB)
newPlayers$MP <- as.numeric(newPlayers$MP)
newPlayers$AST <- as.numeric(newPlayers$AST)
# PREDICTIVE MODEL CONSTRUCTION #
# make a logistic regression model
model1 <- glm(formula = MVP ~ G + MP + PTS + Age + AST + TRB + WS + `FT%` + `FG%`,
data=MVP.Stats.Train, family=binomial, na.action = na.omit)
model2 <- glm(formula = MVP ~ MP + PTS + Age + AST + TRB + WS + `FT%` + `FG%`,
data=MVP.Stats.Train, family=binomial, na.action = na.omit)
model3 <- glm(formula = MVP ~ MP + PTS + AST + TRB + WS + `FT%` + `FG%`,
data=MVP.Stats.Train, family=binomial, na.action = na.omit)
model4 <- glm(formula = MVP ~ MP + AST + TRB + WS + `FT%` + `FG%`,
data=MVP.Stats.Train, family=binomial, na.action = na.omit)
model5 <- glm(formula = MVP ~ MP + AST + TRB + WS + `FT%`,
data=MVP.Stats.Train, family=binomial, na.action = na.omit)
# final model
model6 <- glm(formula = MVP ~ MP + TRB + WS + `FT%`,
data=MVP.Stats.Train, family=binomial, na.action = na.omit)
# results of the model
modelSum <- summary(model6)
modelSum
# test the model based on the test data set
predAcc <- function(){
inAcc <- abs(MVP.Stats.Test$MVP - predict(model6, MVP.Stats.Test, type="response"))
numRight <- length(which(inAcc<.5))
total <- nrow(MVP.Stats.Test)
return (numRight/total)
}
# although the prediction accuracy is high, the model is poor since it almost always misguesses
# the actual MVP's as not MVP's (false negative)
predAcc()
# MVP OF ALL TIME #
# determine the best season of all time, and determine the MVP
l <- nrow(MVP.Stats)
mvp <- "none"
mvpYear <- 0
mvpScore <- -100
MVP.Stats$score <- 0
for(i in 1:l){
if(predict(model6,MVP.Stats[i,])>mvpScore){
mvp <- MVP.Stats[i,]$Player
mvpScore <- predict(model6,MVP.Stats[i,])
mvpYear <- MVP.Stats[i,]$Year
}
MVP.Stats[i,]$score <- predict(model5,MVP.Stats[i,])
}
# mvp of all time
mvpAllTime <- paste(mvp,mvpYear,mvpScore,sep=", ")
mvpAllTime
# rank of all candidates for MVP of all time
MVPRankAllTime <- MVP.Stats
MVPRankAllTime <- MVPRankAllTime[with(MVPRankAllTime,order(-score)),]
# MVP OF 2016-2017 SEASON
# mvp of 2016 season
name <- ""
score <- -100
newPlayers$score <- 0
l <- nrow(newPlayers)
for(i in 1:l){
if(predict(model6,newPlayers[i,])>score){
score <- predict(model6,newPlayers[i,])
name <- newPlayers[i,]$Player
}
newPlayers[i,]$score <- predict(model6,newPlayers[i,])
}
# rank of all candidates for MVP, candidates must play >20 minutes per game
MVPRank2017 <- newPlayers[newPlayers$MP>20,]
MVPRank2017 <- MVPRank2017[with(MVPRank2017,order(-score)),]
MVPRank2017$MVP.Chance <- predict(model6,MVPRank2017,type="response")
# export data for visualization
mvps <- MVPRank2017[,c(2,33)]
write.csv(mvps, file = "MVPs.csv")
#mvp
mvp2017 <- MVPRank2017[1,]$Player
mvp2017
# calculate confidence interval for chance of Rudy Gobert being MVP
inAcc <- abs(MVP.Stats.Test$MVP - predict(model5, MVP.Stats.Test, type="response"))
MAD <- mean(inAcc)
StDev <- 0.8 * MAD
StErr <- StDev / sqrt(nrow(MVP.Stats.Test)-1)
IntLow <- predict(model6,MVPRank2017[1,],type="response") - StErr * 1.96
IntHigh <- predict(model6,MVPRank2017[1,],type="response") + StErr * 1.96
# confidence interval
confInterval <- paste("(",toString(IntLow),", ",toString(IntHigh),")",sep="")
View(MVP.Stats)
View(MVP.Stats)
View(MVPRank2017)
View(MVPRank2017)
View(MVPRank2017)
MVP.Stats <- players()
# create random numbers for every row
MVP.Stats$Set <- sample(1:nrow(MVP.Stats),nrow(MVP.Stats))
# split the data into training and testing sets based on randum number
MVP.Stats.Train <- MVP.Stats[MVP.Stats$Set<=nrow(MVP.Stats)/2,]
MVP.Stats.Test <- MVP.Stats[MVP.Stats$Set>nrow(MVP.Stats)/2,]
# scrape the 2016-2017 player data and export as csv
URL <- getURL("http://www.basketball-reference.com/leagues/NBA_2017_per_game.html")
newPlayers <- readHTMLTable(URL)[[1]]
colnames(newPlayers)[30] <- "PTS"
# scrape the 2016-2017 advanced player data and export as csv
URL <- getURL("http://www.basketball-reference.com/leagues/NBA_2017_advanced.html")
newPlayersAd <- readHTMLTable(URL)[[1]]
newPlayersAd <- newPlayersAd[,-c(20,25)]
MVP.Stats <- MVP.Stats[,-1]
MVP.Stats$`FT%` <- as.numeric(MVP.Stats$`FT%` * 10)
MVP.Stats$`FG%` <- as.numeric(MVP.Stats$`FG%` * 10)
MVP.Stats$G <- as.numeric(MVP.Stats$G)
MVP.Stats$PTS <- as.numeric(MVP.Stats$PTS)
MVP.Stats$TRB <- as.numeric(MVP.Stats$TRB)
MVP.Stats$WS <- as.numeric(MVP.Stats$WS)
View(MVP.Stats.Test)
View(MVP.Stats.Test)
MVP.Stats.Test <- MVP.Stats.Test$find()
MVP.Stats.Test <- MVP.Stats.Test[,-1]
MVP.Stats.Test$`FT%` <- as.numeric(MVP.Stats.Test$`FT%` * 10)
MVP.Stats.Test$`FG%` <- as.numeric(MVP.Stats.Test$`FG%` * 10)
MVP.Stats.Test$MP <- as.numeric(MVP.Stats.Test$MP)
MVP.Stats.Test$AST <- as.numeric(MVP.Stats.Test$AST)
MVP.Stats.Test$TRB <- as.numeric(MVP.Stats.Test$TRB)
MVP.Stats.Test$WS <- as.numeric(MVP.Stats.Test$WS)
MVP.Stats.Train <- MVP.Stats.Train$find()
MVP.Stats.Train <- MVP.Stats.Train[,-1]
MVP.Stats.Train$`FT%` <- as.numeric(MVP.Stats.Train$`FT%` * 10)
MVP.Stats.Train$`FG%` <- as.numeric(MVP.Stats.Train$`FG%` * 10)
MVP.Stats.Train$MP <- as.numeric(MVP.Stats.Train$MP)
MVP.Stats.Train$AST <- as.numeric(MVP.Stats.Train$AST)
MVP.Stats.Train$TRB <- as.numeric(MVP.Stats.Train$TRB)
MVP.Stats.Train$WS <- as.numeric(MVP.Stats.Train$WS)
newPlayers <- newPlayers$find()
newPlayers <- newPlayers[,-1]
newPlayers <- newPlayers[!duplicated(newPlayers$Player),]
newPlayers$`FT%` <- as.numeric(newPlayers$`FT%`) * 10
removes <- as.numeric(newPlayers[is.na(newPlayers$`FT%`),]$Rk)[-1]
newPlayers <- na.omit(newPlayers)
newPlayersAd <- newPlayersAd[,-1]
newPlayersAd <- newPlayersAd[!duplicated(newPlayersAd$Player),]
newPlayersAd$Rk <- as.numeric(newPlayersAd$Rk)
newPlayersAd <- newPlayersAd[!(newPlayersAd$Rk %in% removes),]
newPlayersAd$`TS%` <- as.numeric(newPlayersAd$`TS%`)
newPlayersAd <- na.omit(newPlayersAd)
newPlayers$WS <- as.numeric(newPlayersAd$WS)
newPlayers$WS[is.na(newPlayers$WS)] <- 0
newPlayers$G <- as.numeric(newPlayers$G)
newPlayers$PTS <- as.numeric(newPlayers$PTS)
newPlayers$TRB <- as.numeric(newPlayers$TRB)
newPlayers$MP <- as.numeric(newPlayers$MP)
newPlayers$AST <- as.numeric(newPlayers$AST)
View(MVP.Stats.Test)
View(MVP.Stats.Test)
